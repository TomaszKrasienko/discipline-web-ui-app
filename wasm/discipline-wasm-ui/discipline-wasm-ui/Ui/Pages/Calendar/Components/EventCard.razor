@using System.Text
@using discipline_wasm_ui.Infrastructure.Services.DTOs
<div class="pt-2">
    <div class="discipline-event-card @GetEventCardColorClass()">
        <div class="col-md-10 offset-1">
            <div class="row">
                <div class="col-md-8 text-start">
                    <span class="discipline-card-title">
                        @GetTitle()
                    </span>
                </div>
                <div class="col-md-4 text-end">
                    @GetMeetingTimeSpan()
                </div>
            </div>
            <div class="row text-start discipline-card-content">
                <span>
                    @if (CalendarEventDto is not null)
                    {
                        @CalendarEventDto.Action
                    }
                    @if (MeetingDto is not null)
                    {
                        @((MarkupString)ConvertToHtmlLines(GetMeetingNavigationData()))
                    }
                </span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] 
    public ImportantDateDto ImportantDateDto { get; set; }
    
    [Parameter] 
    public CalendarEventDto CalendarEventDto { get; set; }
    
    [Parameter]
    public MeetingDto MeetingDto { get; set; }
    
    private string GetTitle()
    {
        if (ImportantDateDto is not null) return ImportantDateDto.Title;
        if (CalendarEventDto is not null) return CalendarEventDto.Title;
        if (MeetingDto is not null) return MeetingDto.Title;
        return string.Empty;
    }
    
    private string GetMeetingTimeSpan()
    {
        if (CalendarEventDto is not null)
            return GetTime(CalendarEventDto.TimeFrom, CalendarEventDto.TimeTo);
        if (MeetingDto is not null)
            return GetTime(MeetingDto.TimeFrom, MeetingDto.TimeTo);
        return string.Empty;
    }
    
    private string GetTime(TimeOnly timeFrom, TimeOnly? timeTo)
        => timeTo is null ? $"{timeFrom:HH:mm}" : $"{timeFrom:HH:mm} - {timeTo:HH:mm}";
    
    private string GetEventCardColorClass()
    {
        if (ImportantDateDto is not null) return "discipline-important-date-card-color";
        if (CalendarEventDto is not null) return "discipline-calendar-event-card-color";
        if (MeetingDto is not null) return "discipline-meeting-card-color";
        return string.Empty;
    }
    
    private string ConvertToHtmlLines(string input)
        => input.Replace("\n", "<br>");
    
    private string GetMeetingNavigationData()
    {
        StringBuilder data = new StringBuilder();
        if(!string.IsNullOrWhiteSpace(MeetingDto?.Platform)) 
            data.AppendLine($"Platform: {MeetingDto.Platform}");
        if (!string.IsNullOrWhiteSpace(MeetingDto?.Uri))
            data.AppendLine($"Uri: {MeetingDto.Uri}");
        if (!string.IsNullOrWhiteSpace(MeetingDto?.Place))
            data.AppendLine($"Place: {MeetingDto.Place}");
        return data.ToString();
    }
}