@using discipline_wasm_ui.Infrastructure.Infrastructure.Weekdays.Extensions
@using discipline_wasm_ui.Infrastructure.Services.DTOs
@using discipline_wasm_ui.Ui.Components.Buttons
@using discipline_wasm_ui.Ui.Components.Enums
<span class="activity-rule-table-row"
      @onmouseover="OnMouseOver"
      @onmouseout="OnMouseOut">
    <div class="row">
        <div class="col-md-10" @onclick="ShowEditActivityRuleAsync">
            <div class="row activity-rule-table-row-header">
                <span><i class="bi bi-dot"></i>@ActivityRule?.Title</span>
            </div>
            <div class="row activity-rule-table-row-details">
                <span>@ActivityRule?.Mode @ActivityRule.AsCheckedWeekdaysString("-")</span>
            </div>
        </div>
        <div class="col-md-2 text-end">
            @if (_isHover)
            {
                <DisciplineIconButton
                    IconClass="bi-trash-fill"
                    Color="DisciplineIconButtonColor.Red"
                    OnClickButtonCallback="DeleteActivityRuleAsync"/>
            }
        </div>
    </div>
</span>

@code {
    [Parameter] 
    public ActivityRuleDto ActivityRule { get; set; }
    
    [Parameter] 
    public EventCallback<ActivityRuleDto> OnActivityRuleEditCallback { get; set; }
    
    [Parameter] 
    public EventCallback<Guid> OnActivityRuleDeleteCallback { get; set; }
    
    private bool _isHover = false;

    private void OnMouseOver()
        => _isHover = true;

    private void OnMouseOut()
        => _isHover = false;

    private async Task ShowEditActivityRuleAsync()
        => await OnActivityRuleEditCallback.InvokeAsync(ActivityRule);

    private async Task DeleteActivityRuleAsync()
        => await OnActivityRuleDeleteCallback.InvokeAsync(ActivityRule!.Id);

}