@using BlazorBootstrap
@using discipline.ui.blazor.wasm.Components.Modals
@using discipline.ui.blazor.wasm.Components.WeekDays
@using discipline.ui.blazor.wasm.Enums
@using discipline.ui.communication.http.ActivityRules.DTOs
@using discipline.ui.communication.http.ActivityRules.DTOs.Requests
@using discipline.ui.communication.http.ActivityRules.DTOs.Responses
@using discipline.ui.infrastructure.ActivityRules.Facades
@using discipline.ui.infrastructure.ActivityRules.Models
@using discipline.ui.infrastructure.Constants
@inject ICreateActivityRuleFacade CreateActivityRuleFacade
@inject IGetModesFacade GetModesFacade
@inject ToastService ToastService

<DisciplineModal
    @ref="_formModal"
    Size="DisciplineModalSize.Large"
    Title="Create activity rule">
    <Body>
    <EditForm
        method="post"
        OnSubmit="Submit"
        EditContext="_editContext">
        <DataAnnotationsValidator/>
        <label for="activity-rule-title">Title:</label>
        <InputText
            class="form-control"
            id="activity-rule-title"
            placeholder="Title"
            @bind-Value="ActivityRule.Title"/>
        <label for="activity-rule-note">Note:</label>
        <InputTextArea
            class="form-control"
            id="activity-rule-note"
            placeholder="Note"
            @bind-Value="ActivityRule.Title"/>
        <label for="activity-rule-mode">Modes:</label>
        <InputSelect 
            class="form-control"
            id="activity-rule-mode"
            @bind-Value="ActivityRule.Mode"
            @onchange="OnModeChanged">
            @foreach (var mode in _modes)
            {
                <option value="@mode.Mode">@mode.Mode</option>
            }
        </InputSelect>
    </EditForm>
    <WeekDaysPicker 
        @ref="_weekDaysPicker"
        IsVisible="_isDaysVisible"/>
    </Body>
</DisciplineModal>

@code {
    private CancellationTokenSource _cts = new();
    private DisciplineModal _formModal = new DisciplineModal();
    private EditContext? _editContext;
    private IReadOnlyList<ModeResponseDto> _modes = [];
    private WeekDaysPicker _weekDaysPicker = new();
    private bool _isDaysVisible = false;
    
    [SupplyParameterFromForm] 
    public WriteActivityRuleDto ActivityRule { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(ActivityRule);
        _cts = new CancellationTokenSource();        
        var result = await GetModesFacade.HandelAsync(_cts.Token);
        
        if (result.IsT0)
        {
            _modes = result.AsT0;
        }
        else
        {
            ToastService.Notify(result.AsT1.ToDangerToastMessage());
        }

        await _weekDaysPicker.ShowToggle();
    }

    private void OnModeChanged()
    {
        Console.WriteLine("Test");
        _isDaysVisible = !_isDaysVisible;
    }

    
    private async Task Submit()
    {
        var createActivityRuleRequestDto = new CreateActivityRuleRequestDto(
            new ActivityRuleDetailsDto(ActivityRule.Title, ActivityRule.Note),
            "EveryDay", null, null);

        var result = await CreateActivityRuleFacade.HandleAsync(createActivityRuleRequestDto, _cts.Token);
        
        if (result.IsT0)
        {
            await _formModal.CloseAsync();
        }
        else
        {
            ToastService.Notify(result.AsT1.ToDangerToastMessage());
        }
    }

    internal void Open()
        => _formModal.Open();
}