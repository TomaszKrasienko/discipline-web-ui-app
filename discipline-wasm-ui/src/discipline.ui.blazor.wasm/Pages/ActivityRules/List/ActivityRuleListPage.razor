@page "/activity-rules-list"
@using BlazorBootstrap
@using discipline.ui.communication.http.ActivityRules.DTOs.Responses
@using discipline.ui.infrastructure.ActivityRules.Facades
@using discipline.ui.blazor.wasm.Components.Headers
@using discipline.ui.blazor.wasm.Components.Paragraphs
@using discipline.ui.blazor.wasm.Components.Rows
@inject IActivityRulesBrowseFacade ActivityRulesBrowseFacade
@inject IDeleteActivityRuleFacade DeleteActivityRuleFacade
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<DisciplinePageHeader Title="Activity Rules List"/>

@if (_activityRules.Any())
{
    @foreach (var activityRule in _activityRules)
    {
        <DisciplineSelectingRow
            OnRowClickCallback="OpenEditActivityRuleAsync"
            OnTrashClickCallback="async () => await RemoveActivityRuleAsync(activityRule.ActivityRuleId)">
            <div class="col-md-5">
                <MainParagraph Content="@activityRule.Title"/>
            </div>
            <div class="col-md-5 text-end">
                <SubParagraph Content=@GetModeWithSelectedDays(activityRule)/>
            </div>
        </DisciplineSelectingRow>
        @if (activityRule.Stages.Any())
        {
            <div class="col-md-10 offset-lg-1">
                @foreach (var stage in activityRule.Stages)
                {
                    <DisciplineSelectingRow
                        OnRowClickCallback="OpenEditActivityRuleStageAsync"
                        OnTrashClickCallback="RemoveActivityRuleStageAsync">
                        <SubParagraph Content="@GetStageHeader(stage)"/>
                    </DisciplineSelectingRow>
                }
            </div>
        }
    }
}


@code {
    private CancellationTokenSource _cts = new();
    private List<ActivityRuleResponseDto> _activityRules = [];

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        await FillActivityRules();
    }

    private async Task FillActivityRules()
    {
        var result = await ActivityRulesBrowseFacade.HandleAsync(_cts.Token);

        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        _activityRules = result.AsT0.ToList();
    }

    private string GetModeWithSelectedDays(ActivityRuleResponseDto activityRule)
        => activityRule.SelectedDays is null
            ? activityRule.Mode
            : $"{activityRule.Mode} ({string.Join(',', activityRule.SelectedDays)})";

    private string GetStageHeader(ActivityRuleStageResponseDto stage)
        => $"{stage.Index}. {stage.Title}";

    private async Task OpenEditActivityRuleAsync()
    {
        await Task.Delay(1);
    }

    private async Task RemoveActivityRuleAsync(string activityRuleId)
    {
        var result = await DeleteActivityRuleFacade.HandleAsync(activityRuleId, _cts.Token);

        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        if (result.IsT1)
        {
            ToastService.Notify(result.AsT1.ToDangerToastMessage());
        }

        await FillActivityRules();
    }

    private async Task OpenEditActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

    private async Task RemoveActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

}