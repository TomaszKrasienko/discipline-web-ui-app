@page "/activity-rules-list"
@using discipline.ui.communication.http.ActivityRules.DTOs.Responses
@using discipline.ui.infrastructure.ActivityRules.Facades
@using discipline.ui.blazor.wasm.Components.Headers
@using discipline.ui.blazor.wasm.Components.Rows
@inject IActivityRulesBrowseFacade ActivityRulesBrowseFacade
@inject NavigationManager NavigationManager

<DisciplinePageHeader Title="Activity Rules List"/>

<DisciplineSelectingRow>
    test
</DisciplineSelectingRow>


@code {
    private CancellationTokenSource _cts = new();
    private List<ActivityRuleResponseDto> _activityRules = [];

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();

        var result = await ActivityRulesBrowseFacade.HandleAsync(_cts.Token);

        if (result.IsT1)
        {
            NavigationManager.NavigateTo("/sign-in");
        }

        _activityRules = result.AsT0.ToList();
    }

    private string GetModeWithSelectedDays(ActivityRuleResponseDto activityRule)
        => activityRule.SelectedDays is null
            ? activityRule.Mode
            : $"{activityRule.Mode} ({string.Join(',', activityRule.SelectedDays)})";

    private string GetStageHeader(ActivityRuleStageResponseDto stage)
        => $"{stage.Index}. {stage.Title}";

    private async Task OpenEditActivityRuleAsync()
    {
        await Task.Delay(1);
    }

    private async Task RemoveActivityRuleAsync()
    {
        await Task.Delay(1);
    }

    private async Task OpenEditActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

    private async Task RemoveActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

}