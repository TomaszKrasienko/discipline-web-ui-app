@page "/activity-rules-list"
@using discipline_wasm_ui.Infrastructure.Services.DTOs
@using discipline_wasm_ui.Infrastructure.Services.Models
@using discipline_wasm_ui.Ui.Components.Headers
@using BlazorBootstrap
@using discipline_wasm_ui.Infrastructure.Helpers
@using discipline_wasm_ui.Infrastructure.Services.Models.ActivityRules
@using discipline_wasm_ui.Ui.Components.Buttons
@using discipline_wasm_ui.Ui.Components.Pagination
@using discipline_wasm_ui.Ui.Pages.ActivityRules.Components
@using Microsoft.AspNetCore.WebUtilities
@inject IActivityRulesDispatcher ActivityRulesDispatcher;
@inject IDailyProductivityDispatcher DailyProductivityDispatcher;
@inject ToastService ToastService;
@inject NavigationManager NavigationManager;

<PageTitle>Activity rules list</PageTitle>
<DisciplinePageHeader 
    Title="Activity rules list"/>

<div class="row">
    <div class="col-md-8 offset-2">
        @foreach (var activityRule in _activityRules)
        {
            <DisciplineActivityRuleRow
                ActivityRule="activityRule"
                OnActivityRuleRowClickCallback="() => OpenEditFormModal(activityRule.Id)"
                OnActivityRuleDeleteClickCallback="async() => await DeleteActivityRule(activityRule.Id)"
                OnActivityRuleAddFromRuleCallback="async() => await AddActivityFromRuleAsync(activityRule.Id)"/>
        }
    </div>
</div>
<DisciplinePagination
    TotalPages="_totalPages"
    ActiveNumberPage="_pageNumber"
    SelectedPageSize="_pageSize"
    OnPageChangedCallback="ChangePageAsync"
    OnPageSizeChangedCallback="ChangePageSizeAsync"/>

<DisciplineCreateButton
    OnClickButtonCallback="OpenCreateFormModal"/>

<DisciplineActivityRuleModalForm
    @ref="_createFormModal"
    OnHidingCallback="ModalFormHidden"/>

<DisciplineActivityRuleModalForm
    @ref="_editFromModal"
    OnHidingCallback="ModalFormHidden"/>

@code {
    private List<ActivityRuleDto> _activityRules = [];
    private int _pageNumber;
    private int _totalPages = 1;
    private int _pageSize;
    private DisciplineActivityRuleModalForm _createFormModal;
    private DisciplineActivityRuleModalForm _editFromModal;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageNumber", out var pageNumber))
        {
            if (int.TryParse(pageNumber, out var numberPageNumber))
            {
                _pageNumber = numberPageNumber;
            }
        }
        else
        {
            _pageNumber = 1;
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var pageSize))
        {
            if (int.TryParse(pageSize, out var numberPageSize))
            {
                _pageSize = numberPageSize;
            }
        }
        else
        {
            _pageSize = 5;
        }
        await InitializeDataAsync();
    }

    private async Task InitializeDataAsync()
    {
        Console.WriteLine($"Total pages: {_totalPages} Page number: {_pageNumber}");

        var data = await ActivityRulesDispatcher.BrowseActivityRules(new PaginationRequest()
        {
            PageNumber = _pageNumber,
            PageSize = _pageSize
        });
        _activityRules = data.Data;
        _pageNumber = data.MetaData.CurrentPage;
        _totalPages = data.MetaData.TotalPages;
        if (_totalPages < _pageNumber)
        {
            _pageNumber = _totalPages;
            await InitializeDataAsync();
        }
        GoToPage();
        StateHasChanged();
    }

    private void GoToPage()
    {
        var uri = new Uri(NavigationManager.Uri);
        var baseUrl = uri.GetLeftPart(UriPartial.Path);
        NavigationManager.NavigateTo($"{baseUrl}?pageNumber={_pageNumber}&pageSize={_pageSize}");
    }
    
    private async Task ChangePageAsync(int newPageNumber)
    {
        _pageNumber = newPageNumber;
        await InitializeDataAsync();
    }

    private async Task ChangePageSizeAsync(int pageSize)
    {
        _pageSize = pageSize;
        await InitializeDataAsync();
    }

    private void OpenCreateFormModal()
        => _createFormModal.Open();

    private void OpenEditFormModal(Guid activityRuleId)
    {
        _editFromModal.ActivityRuleId = activityRuleId;
        _editFromModal.Open();
    }

    private async Task DeleteActivityRule(Guid activityRuleId)
    {
        var response = await ActivityRulesDispatcher.DeleteActivityRuleAsync(activityRuleId);
        ToastService.Notify(response.ToToastMessage());
        await InitializeDataAsync();
    }

    private async Task AddActivityFromRuleAsync(Guid activityRuleId)
    {
        var response = await DailyProductivityDispatcher.CreateFromActivityRule(new ActivityFromRuleRequest()
        {
            ActivityRuleId = activityRuleId
        });
        ToastService.Notify(response.ToToastMessage());
    }

    private async Task ModalFormHidden()
        => await InitializeDataAsync();
}