<div class="row">
    <div class="col-md-12">
        <button
            class="btn btn-sm discipline-pagination-btn"
            @onclick="() => ButtonClicked(FirstTag)"
            disabled="@(ActiveNumberPage == 1 ? "disabled" : null)">
            <i class="bi bi-chevron-double-left"></i>
        </button>
        <button
            class="btn btn-sm discipline-pagination-btn"
            @onclick="() => ButtonClicked(PreviousTag)"
            disabled="@(ActiveNumberPage == 1 ? "disabled" : null)">
            <i class="bi bi-chevron-left"></i>
        </button>
        @foreach (var number in _pageNumbers)
        {
            <button
                class="btn btn-sm discipline-pagination-btn @(number == ActiveNumberPage ?  "discipline-pagination-btn-active" : "")"
                @onclick="() => ButtonClicked(number.ToString())">
                @number
            </button>
        }
        <button
            class="btn btn-sm discipline-pagination-btn"
            @onclick="() => ButtonClicked(NextTag)"
            disabled="@(ActiveNumberPage == TotalPages ? "disabled" : null)">
            <i class="bi bi-chevron-right"></i>
        </button>
        <button
            class="btn btn-sm discipline-pagination-btn"
            @onclick="() => ButtonClicked(LastTag)"
            disabled="@(ActiveNumberPage == TotalPages ? "disabled" : null)">
            <i class="bi bi-chevron-double-right"></i>
        </button>
    </div>
</div>

@code {
    private List<int> _pageNumbers = new List<int>();
    private const string NextTag = "next";
    private const string PreviousTag = "previous";    
    private const string FirstTag = "first";
    private const string LastTag = "last";
    [Parameter, EditorRequired] 
    public int TotalPages { get; set; }
    
    [Parameter, EditorRequired] 
    public int ActiveNumberPage { get; set; }
    
    [Parameter, EditorRequired] 
    public EventCallback<int> OnPageChangedCallback { get; set; }

    protected override void OnInitialized()
    {
        for (int i = 1; i <= TotalPages; i++)
        {
            _pageNumbers.Add(i);
        }
    }

    private void ButtonClicked(string number)
    {
        switch (number)
        {
            case NextTag:
                ++ActiveNumberPage;
                OnPageChangedCallback.InvokeAsync(ActiveNumberPage);
                break;
            case PreviousTag:
                --ActiveNumberPage;
                OnPageChangedCallback.InvokeAsync(ActiveNumberPage);
                break;
            case LastTag:
                ActiveNumberPage = TotalPages;
                OnPageChangedCallback.InvokeAsync(ActiveNumberPage);
                break;
            case FirstTag:
                ActiveNumberPage = 1;
                OnPageChangedCallback.InvokeAsync(ActiveNumberPage);
                break;
            default:
                int.TryParse(number, out var parsed);
                ActiveNumberPage = parsed;
                OnPageChangedCallback.InvokeAsync(ActiveNumberPage);
                break;
        }
        
    }
}