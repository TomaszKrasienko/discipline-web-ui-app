@page "/activity-rules-list"
@using BlazorBootstrap
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.Dispatchers.Models
@using discipline.core.Dispatchers.Models.ActivityRule
@using discipline.core.DTOs
@using discipline.core.Helpers
@using discipline.ui.Components.Pages.Common.Buttons
@using discipline.ui.Components.Pages.BrowseActivityRulesComponents.Components
@inject IDisciplineAppDispatcher DisciplineAppDispatcher;
@inject ILogger<ActivityRulesList> Logger;
@rendermode InteractiveServer

<PageTitle>Activity rules list</PageTitle>

<div class="row">
    <div class="col-md-8 offset-2">
        <h2>Activity Rules List</h2>
        <ActivityRulesTable/>
    </div>
</div>

<CreateNewButton OnClickCallback="OnClickToCreate"/>

<Modal @ref="modal" title="Create new activity rule" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <div class="row">
            <div class="col-md-10 offset-1">
                <EditForm method="post" OnSubmit="Submit" Model="ActivityRuleRequest">
                    <div class="row" style="padding-top: 20px;">
                        <div class="col-md-6">
                            <label for="new-activity-title">Title: </label>
                            <InputText
                                class="form-control"
                                id="new-activity-title"
                                placeholder="Title"
                                @bind-Value="ActivityRuleRequest!.Title"/>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label" for="new-activity-mode">Mode: </label>
                            <InputSelect 
                                class="form-control"
                                id="new-activity-mode" 
                                @bind-Value="ActivityRuleRequest!.Mode">
                                @foreach (var mode in _activityRuleModes)
                                {
                                    <option value="@mode.Key">
                                        @mode.Name
                                    </option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    @if (ActivityRuleRequest.Mode == "Custom")
                    {
                        <div class="row" style="padding-top: 20px;">
                            <div class="col-md-4 offset-4">
                                <Dropdown Color="DropdownColor.Secondary" AutoClose="false">
                                    <DropdownToggleButton Style="width: 100% !important;">Days</DropdownToggleButton>
                                    <DropdownMenu>
                                        @foreach (var weekday in _weekdays)
                                        {
                                            <span @onclick="() => ChangeWeekdayCheck(weekday)">
                                                <div class="form-check">
                                                    <InputCheckbox
                                                        @bind-Value="weekday!.IsChecked">
                                                    </InputCheckbox>
                                                    <label class="form-check-label">
                                                        @weekday.Name
                                                    </label>
                                                </div>
                                            </span>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </div>
                        </div>
                    }
                    <div class="row" style="padding-top: 20px;">
                        <div class="form-group">
                            <button class="btn btn-dark" type="submit">Submit</button>
                            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </BodyTemplate>
</Modal>


@code {
    //List
    private List<ActivityRuleDto> _activityRules = new();
    private int _pageNumber = 1;
    private int _totalPages = 1;
    private int _pageSize = 5;
    
    //Modal
    private Modal modal = default!;

    //Edit form
    [SupplyParameterFromForm] 
    public ActivityRuleRequest ActivityRuleRequest { get; set; } = new();
    
    private readonly List<WeekdayDto> _weekdays = WeekdayFactory.Get();
    private List<ActivityRuleModeDto> _activityRuleModes = new();
    
    protected override async Task OnInitializedAsync()
        => await InitializeData();

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        Logger.LogInformation("On page changed");
        _pageNumber = newPageNumber;
        await InitializeData();
    }

    private async Task InitializeData()
    {
        var data = await DisciplineAppDispatcher.BrowseActivityRules(new PaginationRequest()
        {
            PageNumber = _pageNumber,
            PageSize = _pageSize
        });
        _activityRules = data.Data;
        _pageNumber = data.MetaData.CurrentPage;
        _totalPages = data.MetaData.TotalPages;
    }

    private void OnShowToEdit(ActivityRuleDto activityRuleDto)
    {
        Logger.LogInformation("Redirect");   
    }

    private async Task OnClickToCreate()
    {
        Logger.LogInformation("ShowToAdd");
        await OnShowModalClick();
    }
    
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
        _activityRuleModes = await DisciplineAppDispatcher.GetActivityRuleModesAsync();
        ActivityRuleRequest.Mode = _activityRuleModes.FirstOrDefault()?.Key;
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    
    private async Task Submit()
    {
        var selectedDays = _weekdays.Where(x => x.IsChecked).Select(x => x.Id).ToList();
        if (selectedDays.Any())
        {
            ActivityRuleRequest.SelectedDays = selectedDays;
        }
        var response = await DisciplineAppDispatcher.CreateActivityRuleAsync(ActivityRuleRequest);
        // if (!response.IsValid)
        // {
        //     _isValid = false;
        //     _errorMessage = response.Message;
        // }
        // else
        // {
        //     NavigationManager.NavigateTo("/");
        // }
    }
    
    private void ChangeWeekdayCheck(WeekdayDto weekday)
        => weekday.IsChecked = !weekday.IsChecked;
}