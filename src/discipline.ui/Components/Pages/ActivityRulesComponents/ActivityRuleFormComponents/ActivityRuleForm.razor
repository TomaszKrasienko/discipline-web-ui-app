@namespace discipline.ui.Components.Pages.ActivityRulesComponents.ActivityRuleFormComponents
@using discipline.core.Dispatchers.Models.ActivityRule
@using discipline.core.DTOs
@using discipline.core.Helpers
@using discipline.ui.Components.Common.ButtonsComponents
@using BlazorBootstrap
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.Dispatchers.Models.DailyProductivity
@using discipline.core.Helpers.Abstractions
@using discipline.ui.Helpers
@inject IActivityRulesDispatcher ActivityRulesDispatcher;
@inject IDailyProductivityDispatcher DailyProductivityDispatcher;
@inject IWeekdayTranslator WeekdayTranslator;

<EditForm method="post" OnSubmit="Submit" Model="ActivityRuleRequest">
    <div class="row" style="padding-top: 20px;">
        <div class="col-md-6">
            <label for="new-activity-title">Title: </label>
            <InputText
                class="form-control"
                id="new-activity-title"
                placeholder="Title"
                @bind-Value="ActivityRuleRequest!.Title"/>
        </div>
        <div class="col-md-6">
            <label class="form-label" for="new-activity-mode">Mode: </label>
            <InputSelect 
                class="form-control"
                id="new-activity-mode" 
                Value="ActivityRuleRequest!.Mode"
                ValueExpression="() => ActivityRuleRequest.Mode"
                ValueChanged="(string mode) => OnModeChanged(mode)">
                @foreach (var mode in _activityRuleModes)
                {
                    <option value="@mode.Key">
                        @mode.Name
                    </option>
                }
            </InputSelect>
        </div>
    </div>
    @if (ActivityRuleRequest.Mode == ModeWithDays)
    {
        <div class="row" style="padding-top: 20px;">
            <div class="col-md-4 offset-4">
                <Dropdown Color="DropdownColor.Secondary" AutoClose="false">
                    <DropdownToggleButton Style="width: 100% !important;">Days</DropdownToggleButton>
                    <DropdownMenu>
                        @foreach (var weekday in _weekdays)
                        {
                            <span @onclick="() => OnWeekdayCheckChanged(weekday)">
                                <div class="form-check">
                                    <InputCheckbox
                                        @bind-Value="weekday!.IsChecked">
                                    </InputCheckbox>
                                    <label class="form-check-label">
                                        @weekday.Name
                                    </label>
                                </div>
                            </span>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>
    }
    <div class="row btn-position">
        <div class="col-md-12 d-flex justify-content-end">
            @if (ActivityRuleId is not null)
            {
                <CreateFromRuleButton OnClickCallback="CreateActivityFromRuleAsync"/>
            }
            <SubmitButton Type="SubmitButton.SubmitButtonType.Modal"/>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm] public ActivityRuleRequest ActivityRuleRequest { get; set; } = new();
    [Parameter] public Modal? Modal { get; set; }
    [Parameter] public List<ToastMessage>? Messages { get; set; }
    [Parameter] public Guid? ActivityRuleId { get; set; }
    [Parameter] public EventCallback OnActivityAdd { get; set; }
    private const string ModeWithDays = "Custom";
    private List<WeekdayDto> _weekdays = default!;
    private List<ActivityRuleModeDto> _activityRuleModes = [];

    protected override async Task OnInitializedAsync()
    {
        _activityRuleModes = await ActivityRulesDispatcher.GetActivityRuleModesAsync();
        ActivityRuleRequest.Mode = _activityRuleModes.FirstOrDefault()?.Key;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ActivityRuleId is not null)
        {
            var rule = await ActivityRulesDispatcher.GetCreateActivityRuleByIdAsync(ActivityRuleId.Value);
            ActivityRuleRequest = new ActivityRuleRequest()
            {
                Title = rule.Title,
                Mode = rule.Mode,
                SelectedDays = rule.SelectedDays
            };
        }
        _weekdays = WeekdayTranslator.Transform(ActivityRuleRequest.SelectedDays);
    }

    private async Task Submit()
    {
        ActivityRuleRequest.SelectedDays = null;
        var selectedDays = _weekdays.Where(x => x.IsChecked).Select(x => x.Id).ToList();
        if (selectedDays.Any())
        {
            ActivityRuleRequest.SelectedDays = selectedDays;
        }

        if (ActivityRuleId is null)
        {
            await AddActivityRuleAsync();
        }
        else
        {
            await EditActivityRuleAsync();
        }

        await OnActivityAdd.InvokeAsync();
    }

    private async Task AddActivityRuleAsync()
    {
        var response = await ActivityRulesDispatcher.CreateActivityRuleAsync(ActivityRuleRequest);
        Messages?.Add(response.AsToastMessage("Added activity rule"));
    }

    private async Task EditActivityRuleAsync()
    {
        var response = await ActivityRulesDispatcher.EditActivityRuleAsync(ActivityRuleId!.Value, ActivityRuleRequest);
        Messages?.Add(response.AsToastMessage("Activity rule updated"));
    }
    
    private void OnWeekdayCheckChanged(WeekdayDto weekday)
        => weekday.IsChecked = !weekday.IsChecked;

    private void OnModeChanged(string mode)
    {
        ActivityRuleRequest.Mode = mode;
        _weekdays = mode != ModeWithDays 
            ? WeekdayFactory.Get() 
            : WeekdayTranslator.Transform(ActivityRuleRequest.SelectedDays);
    }

    private async Task CreateActivityFromRuleAsync()
    {
        var response = await DailyProductivityDispatcher.CreateFromActivityRule(new ActivityFromRuleRequest()
        {
            ActivityRuleId = ActivityRuleId!.Value
        });
        Messages?.Add(response.AsToastMessage("Activity added"));
        await Modal!.HideAsync();
    }
}