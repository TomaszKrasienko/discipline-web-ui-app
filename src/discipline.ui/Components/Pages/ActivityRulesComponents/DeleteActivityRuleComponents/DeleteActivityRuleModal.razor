@using discipline.ui.Components.Common.ButtonsComponents
@using BlazorBootstrap
@using discipline.core.Dispatchers.Abstractions
@inject IActivityRulesDisciplineAppDispatcher ActivityRulesDisciplineAppDispatcher;


<Modal
    @ref="_deleteConfirmationModal"
    Title="Confirm">
    <BodyTemplate>
        Are you sure you want delete item?
    </BodyTemplate>
    <FooterTemplate>
        <CancelIconButton OnClickCallback="HideModalAsync"></CancelIconButton>
        <ConfirmIconButton OnClickCallback="DeleteAsync"/>
    </FooterTemplate>
</Modal>

<Toasts 
    Class="p-3" 
    Messages="_messages" 
    AutoHide="true" 
    Delay="4000" 
    Placement="ToastsPlacement.TopRight"/>

@code {
    [Parameter] 
    public Guid? ActivityRuleId { get; set; }
    
    [Parameter]
    public EventCallback OnHidingEventCallback { get; set; }
    
    private Modal _deleteConfirmationModal = default!;
    private List<ToastMessage> _messages = [];
    
    private async Task HideModalAsync()
    {
        await _deleteConfirmationModal.HideAsync();
    }

    private async Task DeleteAsync()
    {
        var response = await ActivityRulesDisciplineAppDispatcher.DeleteActivityRuleAsync(ActivityRuleId!.Value);
        _messages?.Add(response.IsValid 
            ? CreateToastMessage(ToastType.Success, "Deleted activity rule") 
            : CreateToastMessage(ToastType.Danger, response.Message));
        await OnHidingEventCallback.InvokeAsync();
        await _deleteConfirmationModal.HideAsync();
    }
    
    private ToastMessage CreateToastMessage(ToastType type, string message)
        => new()
        {
            Type = type,
            Message = message
        };

    internal async Task ShowAsync()
    {
        await _deleteConfirmationModal.ShowAsync();
    }
}