@page "/daily-productivity"
@namespace discipline.ui.Components.DailyProductivity
@using BlazorBootstrap
@using discipline.ui.Components.Common.HeadersComponents
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.DTOs
@using discipline.ui.Components.Pages.DailyProductive.BrowseDailyProductivity.TableComponent
@using discipline.ui.Components.Common.ButtonsComponents
@using discipline.ui.Components.Pages.DailyProductiveComponents.ActivityFormComponents
@inject IDailyProductivityDispatcher DailyProductivityDisciplineAppDispatcher
@inject ILogger<DailyProductivityTable> Logger;
@rendermode InteractiveServer

<PageTitle>Daily productivity</PageTitle>
@if (IsTitleVisible)
{
    <PageHeader Title="Daily productivity"/>
}
<div class="row text-center">
    <div class="col-md-4 offset-4">
        <DateInput 
            TValue="DateOnly" 
            Id="daily-productivity-day"
            Value="_day"
            ValueExpression="() => _day"
            ValueChanged="async (value) => await OnDateChanged(value)"/>
    </div>
</div>
<div class="row pt-5">
    <div class="col-md-6 offset-2 mx-auto">
        @if (_dailyProductivity is not null)
        {
            @foreach (var activity in _dailyProductivity?.Activities!)
            {
                <div class="row">
                    <ActivityTableRow 
                        Activity="activity" 
                        OnActivityRowClick="async () => await ChangeCheck(activity)"
                        OnDeleteActivityCallback="InitializeDailyProductivityAsync"/>
                </div>
            }
        }
    </div>
</div>

<CreateNewButton 
    OnClickCallback="ShowCreateNewFormAsync"/>

<ActivityFormModal
    @ref="_activityFormModal"
    Day="_day"
    OnHidingEventCallback="InitializeDailyProductivityAsync"/>

@code {
    [Parameter] public bool IsTitleVisible { get; set; } = true;
    [Parameter] public EventCallback OnActivityCheckChanged { get; set; }
    private DateOnly _day = DateOnly.FromDateTime(DateTime.Now.Date);
    private DailyProductivityDto? _dailyProductivity;
    private ActivityFormModal _activityFormModal = default!;

    protected override async Task OnInitializedAsync()
        => await InitializeDailyProductivityAsync();

    private async Task InitializeDailyProductivityAsync()
        => _dailyProductivity = await DailyProductivityDisciplineAppDispatcher.GetDailyProductivityByDay(_day);
    

    private async Task OnDateChanged(DateOnly date)
    {
        if (!(_day == date))
        {
            _day = date;
            await InitializeDailyProductivityAsync();
            StateHasChanged();
        }

    }

    private async Task ChangeCheck(ActivityDto activity)
    {
        var response = await DailyProductivityDisciplineAppDispatcher.ChangeActivityCheck(activity.Id);
        if (response.IsValid)
        {
            activity.IsChecked = !activity.IsChecked;
            await OnActivityCheckChanged.InvokeAsync();
        }
    }

    private async Task ShowCreateNewFormAsync()
        => await _activityFormModal.ShowModalAsync();

}