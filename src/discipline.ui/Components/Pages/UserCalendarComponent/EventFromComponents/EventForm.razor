@using discipline.ui.Components.Common.ButtonsComponents
@using discipline.ui.Enums
@using discipline.ui.Models
@using BlazorBootstrap
@using discipline.core.Dispatchers.Abstractions
@using discipline.ui.Helpers
@inject IUserCalendarDispatcher UserCalendarDispatcher

<EditForm
    method="post"
    Model="UserCalendarEvent"
    OnSubmit="async () => await SubmitAsync()">
    <div class="row">
        <div class="col-md-6 offset-3">
            <div class="row">
                <label for="user-calendar-day">Day: </label>
                <InputDate
                    class="form-control"
                    id="user-calendar-day"
                    @bind-Value="UserCalendarEvent!.Day"/>
            </div>
            <div class="row">
                <label for="user-calendar-event-title">Title:</label>
                <InputText
                    class="form-control"
                    id="user-calendar-event-title"
                    placeholder="Title"
                    @bind-Value="UserCalendarEvent!.Title"/>
            </div>
            @if (Type is EventType.CalendarEvent or EventType.Meeting)
            {
                <div class="row">
                    <label for="user-calendar-event-time-from">Time from:</label>
                    <TimeInput
                        class="form-control"
                        id="user-calendar-event-time-from"
                        TValue="TimeOnly"
                        @bind-Value="UserCalendarEvent!.TimeFrom"/>
                </div>
                <div class="row">
                    <label for="user-calendar-event-time-to">Time to:</label>
                    <TimeInput
                        class="form-control"
                        id="user-calendar-event-time-to"
                        TValue="TimeOnly?"
                        @bind-Value="UserCalendarEvent!.TimeTo"/>
                </div>
            }
            @if (Type is EventType.CalendarEvent)
            {
                <div class="row">
                    <label for="user-calendar-event-action">Action:</label>
                    <InputText
                        class="form-control"
                        id="user-calendar-event-action"
                        placeholder="Action"
                        @bind-Value="UserCalendarEvent!.Action"/>
                </div>
            }
            @if (Type is EventType.Meeting)
            {
                <div class="row">
                    <label for="user-calendar-event-platform">Platform:</label>
                    <InputText
                        class="form-control"
                        id="user-calendar-event-platform"
                        placeholder="Platform"
                        @bind-Value="UserCalendarEvent!.Platform"/>
                </div>
                <div class="row">
                    <label for="user-calendar-event-uri">Uri:</label>
                    <InputText
                        class="form-control"
                        id="user-calendar-event-uri"
                        placeholder="Uri"
                        @bind-Value="UserCalendarEvent!.Uri"/>
                </div>
                <div class="row">
                    <label for="user-calendar-event-place">Place:</label>
                    <InputText
                        class="form-control"
                        id="user-calendar-event-place"
                        placeholder="Place"
                        @bind-Value="UserCalendarEvent!.Place"/>
                </div>
            }
        </div> 
    </div>
    <div class="row">
        <div class="col-md-12 d-flex justify-content-end">
            <SubmitButton Type="SubmitButton.SubmitButtonType.Modal"/>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public UserCalendarEvent? UserCalendarEvent { get; set; }
    [Parameter] public DateOnly Day { get; set; }
    [Parameter] public EventType Type { get; set; }
    [Parameter] public List<ToastMessage>? Messages { get; set; }
    [Parameter] public EventCallback OnSubmitCallback { get; set; }

    protected override void OnParametersSet()
    {
        UserCalendarEvent ??= new();
        UserCalendarEvent.Day = Day;
    }

    private async Task SubmitAsync()
    {
        //TODO: Refactor
        if (Type is EventType.ImportantDate)
        {
            var response = await UserCalendarDispatcher.AddImportantDateAsync(UserCalendarEvent?.AsImportantDateRequest());
            Messages?.Add(response.AsToastMessage("Added important date"));
            await OnSubmitCallback.InvokeAsync();
        }
        else if (Type is EventType.CalendarEvent)
        {
            var response = await UserCalendarDispatcher.AddCalendarEventAsync(UserCalendarEvent?.AsCalendarEventRequest());
            Messages?.Add(response.AsToastMessage("Added calendar event"));
            await OnSubmitCallback.InvokeAsync();
        }
        else if (Type is EventType.Meeting)
        {
            var response = await UserCalendarDispatcher.AddMeetingAsync(UserCalendarEvent?.AsMeetingRequest());
            Messages?.Add(response.AsToastMessage("Added meeting"));
            await OnSubmitCallback.InvokeAsync();
        }
    }
}