@page "/user-calendar/{Day}"
@using BlazorBootstrap
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.DTOs
@using discipline.ui.Components.Common.HeadersComponents
@using discipline.ui.Components.Pages.UserCalendarComponent.BrowseUserCalendarComponents.CalendarComponents
@inject IUserCalendarDispatcher UserCalendarDispatcher

<PageTitle>@Title</PageTitle>
<PageHeader Title=@Title/>

<div class="row text-center">
    <div class="col-md-6 offset-3">
        <div class="row">
            <div class="col-md-8 offset-2">
                <DateInput
                    TValue="DateOnly"
                    Id="user-calendar-day"
                    Value="_day"
                    ValueExpression="() => _day"
                    ValueChanged="async (value) => await OnDateChanged(value)"/>
            </div>
        </div>
        
        <div class="row" style="padding-top: 60px">
            <span style="background-color: #f7f7f7;">
            @foreach (var importantDay in _userCalendarDto?.ImportantDates ?? [])
            {
                <EventCard ImportantDateDto="importantDay"/>
            }    
            @foreach (var calendarEvent in _userCalendarDto?.CalendarEvents ?? [])
            {
                <EventCard CalendarEventDto="calendarEvent"/>
            }
            @foreach (var meeting in _userCalendarDto?.Meetings ?? [])
            {
                <EventCard MeetingDto="meeting"/>
            }
            </span>
        </div>
    </div>
</div>

@code {
    private const string Title = "User Calendar";
    private DateOnly _day;
    private UserCalendarDto? _userCalendarDto;
    
    [Parameter] 
    public string Day { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _day = DateOnly.Parse(Day);
        _userCalendarDto = await UserCalendarDispatcher.GetUserCalendarByDayAsync(_day);
    }

    private async Task OnDateChanged(DateOnly date)
    {
        if (!(_day == date))
        {
            _day = date;
        }
    }
}