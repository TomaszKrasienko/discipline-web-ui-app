@page "/user-calendar/{Day}"
@using BlazorBootstrap
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.DTOs
@using discipline.ui.Components.Common.ButtonsComponents
@using discipline.ui.Components.Common.HeadersComponents
@using discipline.ui.Components.Pages.UserCalendarComponent.BrowseUserCalendarComponents.CalendarComponents
@using discipline.ui.Components.Pages.UserCalendarComponent.EventFromComponents
@using discipline.ui.Dictionaries
@using discipline.ui.Enums
@inject IUserCalendarDispatcher UserCalendarDispatcher

<PageTitle>@Title</PageTitle>
<PageHeader Title=@Title/>

<div class="row text-center">
    <div class="col-md-10 offset-1">
        <div class="row">
            <div class="col-md-4 offset-4">
                <DateInput
                    TValue="DateOnly"
                    Id="user-calendar-day"
                    Value="_day"
                    ValueExpression="() => _day"
                    ValueChanged="async (value) => await OnDateChanged(value)"/>
            </div>
        </div>
        
        <div class="row calendar">
            <div class="col-md-8 offset-2">
                <p>Important event</p>
                <div class="event-section">
                    @foreach (var importantDay in _userCalendarDto?.ImportantDates ?? [])
                    {
                        <div class="event-card">
                            <EventCard ImportantDateDto="importantDay"/>
                        </div>
                    }
                </div>
                <p>Calendar events</p>
                <div class="event-section">
                    @foreach (var calendarEvent in _userCalendarDto?.CalendarEvents ?? [])
                    {
                        <div class="event-card">
                            <EventCard CalendarEventDto="calendarEvent"/>
                        </div>
                    }
                </div>
                <p>Meetings:</p>
                <div class="event-section">
                    @foreach (var meeting in _userCalendarDto?.Meetings ?? [])
                    {
                        <div class="event-card">
                            <EventCard MeetingDto="meeting"/>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<CreateNewDropUpButton
    Options="EventTypeDictionary.Dictionary"
    OnClickCallback="ShowCreateNewFormAsync"/>

<EventFormModal 
    @ref="_formModal"/>

@code {
    private const string Title = "User Calendar";
    private DateOnly _day;
    private UserCalendarDto? _userCalendarDto;
    private EventFormModal _formModal;
    
    [Parameter] 
    public string Day { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _day = DateOnly.Parse(Day);
        await InitializeData();
    }
    
    private async Task InitializeData()
        => _userCalendarDto = await UserCalendarDispatcher.GetUserCalendarByDayAsync(_day);

    private async Task OnDateChanged(DateOnly date)
    {
        if (!(_day == date))
        {
            _day = date;
            await InitializeData();
        }
    }

    private async Task ShowCreateNewFormAsync(EventType type)
        => await _formModal.ShowModalAsync(type);

}