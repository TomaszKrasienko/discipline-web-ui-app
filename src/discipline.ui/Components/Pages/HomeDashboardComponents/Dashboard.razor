@using discipline.ui.Components.DailyProductivity 
@using discipline.ui.Services.Abstractions
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.DTOs
@using discipline.ui.Models
@using Newtonsoft.Json
@using BlazorBootstrap
@inject ILaborIntensityService LaborIntensityService;
@inject IDailyProductivityDispatcher DailyProductivityDispatcher;
@rendermode InteractiveServer

<div class="row">
    <div class="col-md-12 text-center">
        <h2>Welcome again. Keep your Discipline.</h2>
    </div>
</div>
<div class="dashboard-element-position">
    <DailyProductivityTable 
        ActivityCheckedCallback="RefreshChart"
        IsTitleVisible="false"/> 
</div>
<div class="row dashboard-element-position">
    <div class="col-md-8 offset-2">
        <LineChart
            @ref="_lineChart"/>
    </div>
</div>
@code {
    private List<ProgressDataDto> Data { get; set; } = [];
    private LineChart _lineChart = default!;
    private ChartData _chartData = default!;
    private LineChartOptions _lineChartOptions = default!;
    private const string BlackColorHex = "#000000"; 
    
    internal async Task RefreshChart()
    {
        await InitializeAsync();
        InitializeChart();
        await _lineChart.UpdateAsync(_chartData, _lineChartOptions);
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
        InitializeChart();
        InitializeChartOptions();
    }

    private async Task InitializeAsync()
        => Data = await DailyProductivityDispatcher.GetProgressDate();

    private void InitializeChart()
    {
        var labels = Data.Select(x => x.Day.ToString()).ToList();
        var datasets = new List<IChartDataset>();
        datasets.Add(new LineChartDataset()
        {
            Label = "Progress",
            Data = Data.Select(x => x.Percent).ToList(),
            BackgroundColor = [BlackColorHex],
            BorderWidth = [5],
            HoverBorderWidth = [4],
            PointBackgroundColor = [BlackColorHex],
            PointHoverRadius = [0]
        });
        _chartData = new ChartData() { Labels = labels, Datasets = datasets };
    }

    private void InitializeChartOptions()
    {
        _lineChartOptions = new();
        _lineChartOptions.Responsive = true;
        _lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };
        _lineChartOptions.Layout.Padding = 70;
        _lineChartOptions.Scales.Y!.Max = 100;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _lineChart.InitializeAsync(_chartData, _lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}