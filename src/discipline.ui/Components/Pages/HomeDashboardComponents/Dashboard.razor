@using discipline.ui.Components.DailyProductivity 
@using discipline.ui.Services.Abstractions
@using discipline.core.Dispatchers.Abstractions
@using discipline.core.DTOs
@using discipline.ui.Models
@using Newtonsoft.Json
@using BlazorBootstrap
@inject ILaborIntensityService LaborIntensityService;
@inject IDailyProductivityDispatcher DailyProductivityDispatcher;
@inject ILogger<Dashboard> Logger;
@rendermode InteractiveServer

<div class="row">
    <div class="col-md-12 text-center">
        <h2>Welcome again. Keep your Discipline.</h2>
    </div>
</div>
<div>
    <DailyProductivityTable 
        ActivityCheckedCallback="RefreshChart"
        IsTitleVisible="false"
        /> 
</div>

<div style="pointer-events: none; user-select: none;">
    <LineChart @ref="_lineChart"/>
</div> 

@code {
    private List<ProgressDataDto> Data { get; set; } = new();
    private List<ProgressDataDto> BaseData { get; set; } = new();
    private LineChart _lineChart = default!;
    ChartData chartData = default;
    
    private LineChartOptions lineChartOptions = default!;

    internal async Task RefreshChart()
    {
        await InitializeAsync();
        Logger.LogInformation(JsonConvert.SerializeObject(Data));
        var labels = Data.Select(x => x.Day.ToString()).ToList();
        var datasets = new List<IChartDataset>();
        datasets.Add(new LineChartDataset()
        {
            Label = "Progress",
            Data = Data.Select(x => x.Percent).ToList(),
            BackgroundColor = ["#000000"],
            BorderWidth = [5],
            HoverBorderWidth = [4],
            PointBackgroundColor = ["#000000"],
            PointHoverRadius = [0]
        });

        chartData = new ChartData() { Labels = labels, Datasets = datasets };
        await _lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
        var colors = ColorUtility.CategoricalTwelveColors;
        var labels = Data.Select(x => x.Day.ToString()).ToList();
        var datasets = new List<IChartDataset>();
        datasets.Add(new LineChartDataset()
        {
            Label = "Progress",
            Data = Data.Select(x => x.Percent).ToList(),
            BackgroundColor = ["#000000"],
            BorderWidth = [5],
            HoverBorderWidth = [4],
            PointBackgroundColor = ["#000000"],
            PointHoverRadius = [0]
        });

        chartData = new ChartData() { Labels = labels, Datasets = datasets };
        
        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };
        
        lineChartOptions.Scales.Y!.Max = 100;
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Tasks done", Display = true };
    }

    private async Task InitializeAsync()
        => Data = await DailyProductivityDispatcher.GetProgressDate();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}