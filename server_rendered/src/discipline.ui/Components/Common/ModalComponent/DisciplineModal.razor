@namespace discipline.ui.Components.Common.ModalComponent
@rendermode InteractiveServer

<div class="">
    <div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay; overflow-y: auto;">
        <div class="modal-dialog @(Size == DisciplineModalSize.Large ? "discipline-modal-lg" : "discipline-modal-sm")" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="discipline-btn-close" data-dismiss="modal" aria-label="Close" @onclick="CloseAsync">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="modal-body">
                    @Body
                </div>
                <div class="modal-footer">
                    @Footer
                </div>
            </div>
        </div>
    </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter, EditorRequired] 
    public DisciplineModalSize Size { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; }
    [Parameter] public EventCallback OnHidingCallback { get; set; }
    
    private string _modalDisplay = "none;";
    private string _modalClass = string.Empty;
    private bool _showBackdrop = false;

    public void Open()
    {
        _modalDisplay = "block";
        _modalClass = "show";
        _showBackdrop = true;
        StateHasChanged();
    }

    public async Task CloseAsync()
    {
        _modalDisplay = "none";
        _modalClass = string.Empty;
        _showBackdrop = false;
        StateHasChanged();
        await OnHidingCallback.InvokeAsync();
    }

    public enum DisciplineModalSize
    {
        Large,
        Small
    }
}